#!/usr/bin/env bash
set -e
set -u

# This script will only work for 1920x1080 screens. Anything smaller will need to change xPOS & YPOS

# requirements check
if ! hash dzen2; then
  echo "dvol requires dzen2 to be installed, please install it."
  exit 1
fi

if hash gdbar 2>/dev/null; then
  BAR_PROGRAM=gdbar
elif hash dzen2-gdbar 2>/dev/null; then
  BAR_PROGRAM=dzen2-gdbar
else
  echo 'dvol requires gdbar from the dzen2 package to be installed'
  exit 1
fi

# Use the card with the highest identifier by default
CARD_ID=$(($(aplay -l | awk '/^card/{print $2}' | sort -u | wc -l) -1))
AMIXER="amixer -c $CARD_ID"
CONTROL=$($AMIXER scontrols | grep -F -e Master -e PCM | awk -F"'" '{print $2}' | head -1)
SECS="1"
FONT='-*-fixed-medium-r-normal-*-16-*-*-*-*-*-iso8859-*'
BG="#202020"
FG="#dfff00"
XPOS="1500"
YPOS="30"
WIDTH="400"
PIPE="/tmp/dvolpipe"
test -e $PIPE && rm $PIPE

err() {
  echo "$1"
  exit 1
}

usage() {
  echo "usage: dvol [option]"
  echo
  echo "Options:"
  echo "     -s, --show         show the current song and volume"
  echo "     -t, --toggle       toggle mute on and off"
  echo "     -i, --increase <%> increase volume"
  echo "     -d, --decrease <%> decrease volume"
  echo "         --mixer <str>  alsa mixer name"
  echo "     -f, --foreground <hex color>"
  echo "     -b, --background <hex color>"
  echo "     -h, --help"
  exit
}

#Argument Parsing
PATTERN="\-\-?[a-z]{1,}"
while [[ $1 =~ $PATTERN ]]
do
  case "$1" in
    '-f'|'--foreground')
      FG="${2}"
      shift
      shift
      continue
      ;;
    '-b'|'--background')
      BG="${2}"
      shift
      shift
      continue
      ;;
    '--mixer')
      IF="${2}"
      shift; shift
      continue
      ;;
    '-i'|'--increase')
      [ -z "$2" ] && err "No argument specified for increase."
      $AMIXER set "$CONTROL" "${2}%+" >/dev/null
      break
      ;;
    '-d'|'--decrease')
      [ -z "$2" ] && err "No argument specified for decrease."
      $AMIXER set "$CONTROL" "${2}%-" >/dev/null
      break
      ;;
    '-t'|'--toggle')
      $AMIXER set "$CONTROL" toggle >/dev/null
      break
      ;;
    '-s'|'--show')
      break
      ;;
    '-h'|'--help'|*)
      usage
      exit 0
      ;;
  esac
done

BAR_LABEL_MESSAGE="$CONTROL "
MUTED=$($AMIXER get "$CONTROL" | awk '/(Front|Mono).*Playback/{print $NF}' | tr -d '[]' | uniq)
if [[ "$MUTED" == "off" ]]; then
  VOLUME=0
  BAR_LABEL_MESSAGE="${BAR_LABEL_MESSAGE}Muted "
else
  VOLUME="$($AMIXER get "$CONTROL" | awk '/(Front|Mono).*Playback/{print $4}' | tr -d '[]' | uniq)"
  BAR_LABEL_MESSAGE="${VOLUME} ${BAR_LABEL_MESSAGE}"
fi
# Append spotify track name if found
if [[ "$(pgrep spotify)" ]]; then
	TRACK=$(dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.freedesktop.DBus.Properties.Get string:'org.mpris.MediaPlayer2.Player' string:'Metadata' | grep -A 1 'xesam:title' | grep variant | sed 's/variant//g' | sed 's/string//g' | sed -e 's/^ *\"//g' -e 's/\" *$//g' -e 's/;$//g')
	BAR_LABEL_MESSAGE="${BAR_LABEL_MESSAGE}(on Spotify) ${TRACK}"
fi

#Using named pipe to determine whether previous call still exists
#Also prevents multiple volume bar instances
mkfifo "$PIPE"
(dzen2 -l 1 -x "$XPOS" -y "$YPOS" -w "$WIDTH" -fn "$FONT" -bg "$BG" -fg "$FG" -e 'onstart=uncollapse' < "$PIPE"; rm -f "$PIPE") & 

# Feed the pipe!
(echo "$BAR_LABEL_MESSAGE"; echo "$VOLUME" | $BAR_PROGRAM -w "$WIDTH" -fg "$FG" -bg "$BG"; sleep "$SECS") > "$PIPE"
