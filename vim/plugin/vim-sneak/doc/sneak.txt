*sneak.txt*  motion improved - Version 1.5

                    Sneak - the missing motion for Vim

==============================================================================
1. Overview                                                            *sneak*

Sneak provides a way to move quickly and precisely to locations that would 
be awkward to reach with built-in Vim motions. 

Sneak is invoked with s (sneak forward) or S (sneak backwards), followed by
exactly two characters:

    s{char}{char}

Thus, you can often reach a target with only 3 keystrokes. Sneak always moves 
immediately to the first {char}{char} match. Additional matches are
highlighted, and you can reach them by pressing ; (similar to the built-in 
behavior for |f| and |t|).

Sneak has a few other features, but above all, Sneak tries to get out of your
way: highlights and autocmds are removed as soon as the cursor is moved.

Sneak is tested on 7.2+. Vi-compatibility must be disabled. 'nocompatible'
|sneak-streak-mode| requires Vim 7.3+.

==============================================================================
2. Usage                                                         *sneak-usage*

Sneak is invoked by one of the provided mappings. |sneak-defaults|
You can change these mappings. |sneak-mappings|

Examples (cursor position indicated with brackets []): >

    [L]orem ipsum dolor sit amet, consectetur adipisicing elit
<
Type ssi to go to the beginning of the word "sit": >

    Lorem ipsum dolor [s]it amet, consectetur adipisicing elit
<
Type ; to go to the next match: >

    Lorem ipsum dolor sit amet, consectetur adipi[s]icing elit
<
Type Sdo to go backwards to the beginning of the word "dolor": >

    Lorem ipsum [d]olor sit amet, consectetur adipisicing elit
<
Type dzad to delete from the cursor to the first instance of "ad": >

    Lorem ipsum [a]dipisicing elit
<
------------------------------------------------------------------------------
2.1 Default mappings                                          *sneak-defaults*

Sneak default NORMAL-mode mappings:

    Normal-mode key sequence | Description
    -------------------------|----------------------------------------------
    s{char}{char}            | Go to the next occurrence of {char}{char}
    S{char}{char}            | Go to the previous occurrence of {char}{char}
    s{char}<Enter>           | Go to the next occurrence of {char}
    S{char}<Enter>           | Go to the previous occurrence of {char}
    s<Enter>                 | Repeat the last Sneak.
    S<Enter>                 | Repeat the last Sneak, in reverse direction.
    ;                        | Go to the [count]'th next match
    , or \                   | Go to the [count]'th previous match
    {range}s{char}{char}     | Invoke |sneak-vertical-scope|
    {range}S{char}{char}     | Invoke backwards |sneak-vertical-scope|
    {operator}z{char}{char}  | Perform {operator} from the cursor to the next
                             | occurrence of {char}{char}
    {operator}Z{char}{char}  | Perform {operator} from the cursor to the 
                             | previous occurrence of {char}{char}

Sneak default VISUAL-mode mappings:

    Visual-mode key sequence | Description
    -------------------------|----------------------------------------------
    s{char}{char}            | Go to the next occurrence of {char}{char}
    Z{char}{char}            | Go to the previous occurrence of {char}{char}
    s{char}<Enter>           | Go to the next occurrence of {char}
    Z{char}<Enter>           | Go to the previous occurrence of {char}
    s<Enter>                 | Repeat the last Sneak.
    Z<Enter>                 | Repeat the last Sneak, in reverse direction.
    ;                        | Go to the [count]'th next match
    , or \                   | Go to the [count]'th previous match


==============================================================================
3. Features                                                   *sneak-features*

------------------------------------------------------------------------------
3.1 Normal Mode

`s` (and `S`) waits for two characters, then immediately moves to the next
(previous) match. Additional matches are highlighted until the cursor is
moved. Works across multiple lines.

`[count]s` enters |sneak-vertical-scope| mode.

`;` and `,` repeat the last `s` and `S`. They also work correctly with `f` and `t`,
unless you or another plugin have mapped `f` or `t` to a custom mapping.
`[count];` and `[count],` skip to the [count]'th match, similar to the
behavior of `[count]f` and `[count]t`.

    Note: If your mapleader is `,` then Sneak maps `\` instead of `,`.
    You can override this by specifying some other mapping, eg: >

    nmap ? <Plug>SneakPrevious
<
Sneak adds to the |jumplist| only on the initial invocation; so after hopping
around with ; and , you can easily go back via |CTRL-O| or |``|.

s<Enter> ("s" followed by Enter) always repeats the last search, even if `;`
and `,` were reset by `f` or `t`. This is especially useful for re-invoking
|sneak-streak-mode| (because `;` and `,` never invoke streak-mode).

------------------------------------------------------------------------------
3.2 Commands                                                  *sneak-commands*

Sneak provides commands for additional flexibility.

:Sneak[!] {max}
:SneakBackward[!] {max}
                    Invoke Sneak and perform the search when {max} characters
                    are input at the Sneak prompt. For example, the default
                    {max} is two (2), so when two characters are entered, the
                    match is performed without having to press <Enter>. You
                    can map a key to ":Sneak 1" if you want f-like
                    behavior, or ":Sneak 3" if you want more precision (eg for
                    text with a high degree of uniformity).

                    If [!] is given then |g:sneak#streak| is ignored and
                    "normal" Sneak is performed.

:SneakV[!] {max}
:SneakVBackward[!] {max}
                    Same as :Sneak and :SneakBackward, but preserve the
                    current visual selection.

------------------------------------------------------------------------------
3.3 Visual Mode

`s` works in visual mode the same as normal mode, however to search backwards
use `Z` (because `S` is taken by the |surround| plugin). `;` and `,` also
work in visual mode as they do in normal mode.

------------------------------------------------------------------------------
3.4 Text Object (for use with an |operator|)

Use `z` for operations; for example, `dzab` deletes from the cursor to the next
instance of "ab". `dZab` deletes backwards to the previous instance.
`czab` `cZab` `yzab` and `yZab` also work as expected.

Repeat the operation with |.|

    Note: repeat requires repeat.vim https://github.com/tpope/vim-repeat

------------------------------------------------------------------------------
3.5 Vertical Scope                                      *sneak-vertical-scope*

Sneak has a unique feature called "vertical scope" search. This is invoked by 
prefixing a normal Sneak search (`s` or `S`) with a [count]. In that case, 
the search is restricted to a column having a width of 2× the [count].

|sneak-vertical-scope| never invokes |sneak-streak-mode|.

Use cases:

    - CSV file
    - hex editing :%!xxd
    - any columnar layout

------------------------------------------------------------------------------
3.6 Streak-Mode                                            *sneak-streak-mode*

Sneak "streak" mode minimizes the number of steps to get to a location, using
a clever interface similar to vim-easymotion[2]. However, there are several
differences (explained below) that make Sneak streak-mode faster, simpler,
and more predictable than vim-easymotion.

To enable "passive" or "smart" streak-mode:                   *g:sneak#streak*
>
    let g:sneak#streak = 1
>
Streak-mode:

    - is invoked _only_ if there are ≥2 visible (on-screen) matches
        - matches within |folds| do not invoke streak-mode
        - as always, you can reach folded/off-screen matches with |;| and |,|
    - automatically jumps to the first match
        - press <Space> or <Esc> to escape streak-mode
        - press <Tab> to skip to the next 52 matches
        - press any key that is _not_ displayed as a target label to exit
          streak-mode and perform that key's normal-mode function
    - can be repeated at any time with s<Enter>

As always, you can:
    - skip to the next or previous match with |;| or |,|
    - return to your original location via |CTRL-O| or |``|

Note: If `s` is prefixed with a [count] then |sneak-vertical-scope| is invoked
      and streak-mode will _not_ be invoked.

To force streak-mode (instead of passively letting Sneak decide when to enter
streak-mode), you can create a mapping to <Plug>SneakStreak:
>
    nmap <leader>s <Plug>SneakStreak
<
==============================================================================
4. Configuration                                         *sneak-configuration*

Sneak is designed with sane, effective defaults, so that you (hopefully) don't
need to configure anything; but you can override the defaults in your |vimrc|
file using the following settings.

------------------------------------------------------------------------------
4.1 Options                                                    *sneak-options*

To change an option, add a |let| statement in your |vimrc|. For example: >

    let g:sneak#use_ic_scs = 0
<
Following is a list of Sneak options with their default values.

g:sneak#f_reset = 1
g:sneak#t_reset = 1

        Note: if you have mapped f (or t) to a |sneak-mappings| then the 
        default is 0.

    0 : Pressing |f| (or |t|) will NOT clear the last Sneak search. So you could
        define different maps for <Plug>SneakNext or <Plug>SneakPrevious and
        still use ; and , for |f| and |t| as usual.

    1 : Pressing |f| (or |t|) causes Sneak to "reset" so that |;| and |,| will apply
        to the last f (or t) motion instead of the last s or S. This makes it
        possible to use ; and , for all three motions (f, t, and s).

        Note: if f (or t) was already mapped by you or a plugin, Sneak will
        not override the existing mapping unless you explicitly set f_reset
        (or t_reset). This means Sneak will not be able to reset ; or , when
        you invoke f or t. See the README.md FAQ regarding "f-enhancement"
        plugins.


g:sneak#textobject_z = 1

    0 : Disables "operator" support, so Sneak will not map {operator}z

    1 : Enables "operator" support, so operations like dzab, dZab, 
        czab, cZab, yzab, and yZab invoke Sneak.

g:sneak#use_ic_scs = 0

    0 : Always case-sensitive

    1 : Case sensitivity is determined by 'ignorecase' and 'smartcase'.

g:sneak#map_netrw = 1

    0 : Don't do any special handling of |netrw| buffers.

    1 : Set up Sneak mappings (s and S) in |netrw| buffers (|Ex| and |Vex|), and
        move netrw's default s and S mappings to <leader>s and <leader>S.

g:sneak#streak = 0

    0 : Disable |sneak-streak-mode|.

    1 : Enable |sneak-streak-mode| if the Vim |+conceal| feature is available.

------------------------------------------------------------------------------
4.2 Custom Highlighting                                      *sneak-highlight*

Sneak uses the following highlight groups:

    SneakPluginTarget

        Highlights additional matches. Default color is hideous magenta :)

    SneakPluginScope

        Highlights the search "scope" for |sneak-vertical-scope|.
        Default color is white (or black if background=light)

    SneakStreakTarget

        Highlights matches for |sneak-streak-mode|.

    SneakStreakMask

        Used to de-emphasize un-labeled matches and the "tail" of labeled
        matches in |sneak-streak-mode|, so the target label is easier to see.

There are three ways to override the default colors (listed in order of
decreasing elegance):

    1. Link to existing highlight groups (for example, "ErrorMsg" and
       "Comment") so that the colors are implicitly chosen by your
       currently-activated colorscheme: >

       hi link SneakPluginTarget ErrorMsg
       hi link SneakPluginScope  Comment
<
    2. To define specific colors _regardless_ of the current colorscheme, you
       probably need to define an |autocmd| on the |ColorScheme| event
       (otherwise the colorscheme will clear the highlights): >

       augroup SneakPluginColors
           autocmd!
           autocmd ColorScheme * hi SneakPluginTarget guifg=black guibg=red ctermfg=black ctermbg=red
           autocmd ColorScheme * hi SneakPluginScope  guifg=black guibg=yellow ctermfg=black ctermbg=yellow
       augroup END
<
    3. Edit your color scheme directly: >

       hi SneakPluginTarget guifg=black guibg=red ctermfg=black ctermbg=red
       hi SneakPluginScope  guifg=black guibg=yellow ctermfg=black ctermbg=yellow
<
------------------------------------------------------------------------------
4.3 Custom Mappings                                           *sneak-mappings*

Sneak provides <Plug> mappings for you to specify alternative key maps.
Keep in mind, however, that motion mappings should absolutely be the
least-friction mappings in your editor, because motion is the most common
editor task. Remapping Sneak to something like `<leader>s` is not recommended.

You can remap any Sneak feature (except the "text object" mappings) by 
defining any of these <Plug> mappings in your |vimrc| as shown: >

    nmap ? <Plug>SneakForward
    nmap ? <Plug>SneakBackward
    nmap ? <Plug>SneakNext
    nmap ? <Plug>SneakPrevious
    xmap ? <Plug>VSneakForward
    xmap ? <Plug>VSneakBackward
    xmap ? <Plug>VSneakNext
    xmap ? <Plug>VSneakPrevious
<
Here are some examples: >

    nmap f       <Plug>SneakForward
    xmap f       <Plug>VSneakForward
    nmap F       <Plug>SneakBackward
    xmap F       <Plug>VSneakBackward
    nmap s       <Plug>SneakStreak

    nmap <enter> <Plug>SneakNext
    xmap <enter> <Plug>VSneakNext
    nmap <bs>    <Plug>SneakPrevious
    xmap <bs>    <Plug>VSneakPrevious
<
==============================================================================
5. Contributing                                           *sneak-contributing*

Bug reports, feature requests, and pull requests are welcome:

    https://github.com/justinmk/vim-sneak

In your bug report, it is helpful to include the output of this command: >

    :call sneak#debug#report()

If you are feeling diligent: to narrow down the cause of the issue, you can
run Vim without any plugins except sneak.vim like this: >

    vim -u NONE -N -c ':set runtimepath+=~/.vim/bundle/vim-sneak/' -c ':runtime plugin/sneak.vim'
<
==============================================================================
6. Credits                                                     *sneak-credits*

Author: Justin M. Keyes <justinkz+vim@gmail.com>

Sneak was inspired by vim-seek[1] and vim-easymotion[2].

Tim Pope's plugin sources were used for reference and best practices.

easymotion.txt was used for the initial version of this document.

[1] https://github.com/goldfeld/vim-seek
[2] https://github.com/Lokaltog/vim-easymotion

==============================================================================
vim:tw=78:sw=4:ts=8:ft=help:norl:
