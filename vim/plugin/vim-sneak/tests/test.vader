Execute (Clean up test environment):
  nmap ; <Plug>SneakNext
  nmap \ <Plug>SneakPrevious
  let mapleader = ','
  let sneak#streak = 0
  call sneak#init()

###########################################################

# this must be the first test, because it tests f-repeat
# for the case where s has not ever been invoked.
Given:
  ababAbABababaB
Do (f-repeat without having ever invoked s / issue #31):
  fa;ix
Expect:
  ababAbABxababaB

###########################################################
# unit tests

Do (tickle the autoloads):
  sab

Execute (hl#links_to() returns linked-to highlight group):
  hi! link Conceal SneakConceal
  Assert 'SneakConceal' ==# sneak#hl#links_to('Conceal')

Execute (hl#links_to() returns empty string if not linked):
  hi! link Conceal NONE
  Assert empty(sneak#hl#links_to('Conceal'))

Execute (streak#sanitize_target_labels()):
  call sneak#streak#init()
  let orig = g:sneak#target_labels
  let g:sneak#target_labels = " \\ as  d\<Esc>fo\<Tab>ob\<Space>a;\\rASD"
  call sneak#streak#sanitize_target_labels()
  Assert g:sneak#target_labels ==#  "asdfoobarASD"
  "cleanup
  let g:sneak#target_labels = orig

Given:
  abab
  abab

Execute (s.hasmatches()):
  norm! jll
  let s = g:sneak#search#instance
  call s.init(sneak#opt(), "ab", 0, 0)
  Assert !s.hasmatches(2)
  Assert !s.hasmatches(1)
  norm! k
  Assert s.hasmatches(1)
  Assert s.hasmatches(2)
  Assert !s.hasmatches(3)

###########################################################

Given:
  1 22222 33 444 555 6666 7 888
  11 222 3333 4 55 6666 77 888
  111 22 333 444 42555 6666 7 88888
  1111 2 33 444 555 66 77a 8

Do (move to 22):
  s22x

Expect:
  1 2222 33 444 555 6666 7 888
  11 222 3333 4 55 6666 77 888
  111 22 333 444 42555 6666 7 88888
  1111 2 33 444 555 66 77a 8

Do (next match):
  s22;x

Expect:
  1 2222 33 444 555 6666 7 888
  11 222 3333 4 55 6666 77 888
  111 22 333 444 42555 6666 7 88888
  1111 2 33 444 555 66 77a 8

Do (skip to third match):
  s\<Space>43;x

Expect:
  1 22222 33 444 555 6666 7 888
  11 222 3333 4 55 6666 77 888
  111 22 333 44442555 6666 7 88888
  1111 2 33 444 555 66 77a 8

Do (visual mode forwards):
  vwjs42los55;d

Expect:
  1 22222 33 444 555 6666 7 888
  11 222 3333 4 555 6666 7 88888
  1111 2 33 444 555 66 77a 8

Do (visual mode backwards):
  jjjvwwoZ33;;\d

Expect:
  1 22222 33 444 555 6666 7 888
  11 222 333 444 555 66 77a 8

Given:
  a,,bbb
  aa,,bb
  aaa,,b
  aaaa,,
  aaa,b,
  aa,bb,
  a,bbb,

Do (search backwards):
  jjSbbx

Expect:
  a,,bbb
  aa,,b
  aaa,,b
  aaaa,,
  aaa,b,
  aa,bb,
  a,bbb,

###########################################################

Given:
  Paul McCartney 1942
  George Harrison 1943mmdd
  Ringo Starr 1940mm
  Pete Best 1941

Do (search for H):
  sH\<Enter>x

Expect:
  Paul McCartney 1942
  George arrison 1943mmdd
  Ringo Starr 1940mm
  Pete Best 1941

Do (repeat delete operation):
  dzar.

Expect:
  arrison 1943mmdd
  Ringo Starr 1940mm
  Pete Best 1941

Do (repeat delete operation twice):
  dzar..

Expect:
  arr 1940mm
  Pete Best 1941

#TODO: this functionality is working, but the tests fail for some reason.
#Do (repeat backwards delete operation / issue #7):
#  03jdZar.
#
#Expect:
#  Paul McCartney 1942
#  George HPete Best 1941
#
#Do (repeat backwards delete operation twice / issue #7):
#  03jdZar..
#
#Expect:
#  Paul McCPete Best 1941

###########################################################

Given ruby:
  xyz="abc=def"
  a=b#=c
  \\\\  \ \ ? !--``.ago_		*$&()[]{}


Do (search for backticks, then backslashes):
  llls``S\\i:)

Expect ruby:
  xyz="abc=def"
  a=b#=c
  \\:)\\  \ \ ? !--``.ago_		*$&()[]{}

###########################################################

Given javascript:
  var jdbc = {
    // JDBC driver for MySQL database:
    driver: "com.mysql.jdbc.Driver",
    /* JDBC URL for the connection (jdbc:mysql://HOSTNAME/DATABASE) */
    url: 'jdbc:mysql://localhost/test',
    abpa: "pass",
    "pass:pass":"r00t:pa55"
  };

Do (vertical scope and count-prefixed repeat-motion):
  wwjl3spa2;i:

Expect javascript:
  var jdbc = {
    // JDBC driver for MySQL database:
    driver: "com.mysql.jdbc.Driver",
    /* JDBC URL for the connection (jdbc:mysql://HOSTNAME/DATABASE) */
    url: 'jdbc:mysql://localhost/test',
    abpa: "pass",
    "pass::pass":"r00t:pa55"
  };

###########################################################

Given:
  | Option     | Type    | Default | Description                                    |
  | --         | --      | --      | --                                             |
  | threads    | Fixnum  | 1       | number of threads in the thread pool           |
  | queues     | Fixnum  | 1       | number of concurrent queues                    |
  | queue_size | Fixnum  | 1000    | size of each queue                             |
  | interval   | Numeric | 0       | dispatcher interval for batch processing       |
  | batch      | Boolean | false   | enables batch processing mode                  |
  | batch_size | Fixnum  | nil     | number of maximum items to be assigned at once |
  | logger     | Logger  | nil     | logger instance for debug logs                 |

Do (crazy sequence with s, f, counts, and repeats):
  fDs1\<Space>;\2fe2;3j4Ti\~

Expect:
  | Option     | Type    | Default | Description                                    |
  | --         | --      | --      | --                                             |
  | threads    | Fixnum  | 1       | number of threads in the thread pool           |
  | queues     | Fixnum  | 1       | number of concurrent queues                    |
  | queue_size | Fixnum  | 1000    | size of each queue                             |
  | interval   | NumeRic | 0       | dispatcher interval for batch processing       |
  | batch      | Boolean | false   | enables batch processing mode                  |
  | batch_size | Fixnum  | nil     | number of maximum items to be assigned at once |
  | logger     | Logger  | nil     | logger instance for debug logs                 |

###########################################################

Given:
  abcdef abcdef abcdef
  abcdef abcdef abcdef
  abcdef abcdef abcdef

Execute (create mapping with f as a prefix / do s ; fe):
  nnoremap foobar :echo 'hi'<cr>
  normal sbc2;;fe;iX
  nunmap foobar

Expect:
  abcdef abcdef abcdef
  abcdef abcdXef abcdef
  abcdef abcdef abcdef

###########################################################

Execute (streak-mode):
  let sneak#streak = 1
  call sneak#init()

Given:
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+
  `=QWEOIJ/+     ~~~!!! ! { } abc AAaab
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Do (basic streak motion):
  sabsD

Expect:
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+
  `=QWEOIJ/+     ~~~!!! ! { } abc AAa
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Do (backwards streak motion):
  jj$Sefdix

Expect:
  abcdxef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+
  `=QWEOIJ/+     ~~~!!! ! { } abc AAaab
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Do (SneakNext in streak-mode):
  sab;x

Expect:
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+
  `=QWEOIJ/+     ~~~!!! ! { } bc AAaab
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Do (SneakPrevious in streak-mode):
  jsab\x

Expect:
  abcdef ``=2Bd-a3/+ bCDef ``=2Bd-a3/+
  `=QWEOIJ/+     ~~~!!! ! { } abc AAaab
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Do (SneakNext in visual-mode + streak-mode):
  vsab;x

Expect:
  bc AAaab
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Do (SneakPrevious in visual-mode + streak-mode):
  jvsab\x

Expect:
  abcdef ``=2Bd-a3/+ =QWEOIJ/+     ~~~!!! ! { } abc AAaab
  abcdef ``=2Bd-a3/+ abCDef ``=2Bd-a3/+

Execute (cleanup):
  let g:sneak#streak = 0
  call sneak#init()

###########################################################
# unicode, multibyte

Execute (ASCII has_upper):
  Assert sneak#util#has_upper("Ab")

Execute (ASCII !has_upper):
  Assert !sneak#util#has_upper("ab")

Execute (cyrillic has_upper):
  Assert sneak#util#has_upper("АБРАЗиЯ")

Execute (cyrillic !has_upper):
  Assert !sneak#util#has_upper("абразия")

Execute (set ignorecase):
  set ignorecase
  set nosmartcase
  let g:sneak#use_ic_scs = 1
  call sneak#init()

Execute (sneak#search#get_cs):
  Assert '\c' == sneak#search#get_cs('AB', 1)

Given (ASCII):
  fooabAB
Do (ASCII + ignorecase):
  sABix
Expect:
  fooxabAB
Do (ASCII + ignorecase + repeat):
  sAB;ix
Expect:
  fooabxAB

Given (cyrillic):
  fooабАБаб
Do:
  sабix
Expect:
  fooxабАБаб
Do:
  sАБix
Expect:
  fooxабАБаб
Do (cyrillic + ignorecase + repeat):
  sАБ;ix
Expect:
  fooабxАБаб
Do (cyrillic + ignorecase + repeat x2):
  sАБ;;ix
Expect:
  fooабАБxаб

Execute (set smartcase):
  set smartcase
  call sneak#init()

Given (ASCII):
  fooabABaB
Do:
  sABix
Expect:
  fooabxABaB
Given (cyrillic):
  fooабАБаБ
Do:
  sабix
Expect:
  fooxабАБаБ
Do:
  sАБix
Expect:
  fooабxАБаБ
Do:
  sаБix
Expect:
  fooабАБxаБ

Execute (set case-sensitive):
  let g:sneak#use_ic_scs = 0
  call sneak#init()

Given (ASCII):
  fooAbabaB
Do:
  sabix
Expect:
  fooAbxabaB
Given (cyrillic):
  fooаБАБаб
Do:
  sабix
Expect:
  fooаБАБxаб
Do:
  sАБix
Expect:
  fooаБxАБаб
Do:
  sаБix
Expect:
  fooxаБАБаб
Do:
  sабix
Expect:
  fooаБАБxаб

Given (kanji):
  この機能を使用する場合、コマンfooド
  ラインではなくてコマンドラインウィンドウから
Do:
  s機能ix
Expect:
  このx機能を使用する場合、コマンfooド
  ラインではなくてコマンドラインウィンドウから
Do:
  sooix
Expect:
  この機能を使用する場合、コマンfxooド
  ラインではなくてコマンドラインウィンドウから
Do:
  soドix
Expect:
  この機能を使用する場合、コマンfoxoド
  ラインではなくてコマンドラインウィンドウから
Do:
  sド\<Enter>ix
Expect:
  この機能を使用する場合、コマンfooxド
  ラインではなくてコマンドラインウィンドウから

# https://github.com/Lokaltog/vim-easymotion/issues/28
# "If a word starts with æ, ø or å the highlighting is disturbed."
Given (Norwegian):
  foo æfooæ æfooø øfoo
Do:
  søfix
Expect:
  foo æfooæ æfooø xøfoo

Given (random unicode):
  ´µµ¶·¸¹°°¡À£¨ª¦©¨ª¦¦Þ¨¦©ß©¨
  foo æfïooææ ïoòôõïo ïofoo fooïo ïoïo
Do:
  sææix
Expect:
  ´µµ¶·¸¹°°¡À£¨ª¦©¨ª¦¦Þ¨¦©ß©¨
  foo æfïooxææ ïoòôõïo ïofoo fooïo ïoïo

Given (multibyte chars in various arrangements):
  foo æfïooæ ïoòôõïo ïofoo fooïo ïoïo
Do:
  sïo;;;;ix
Expect:
  foo æfïooæ ïoòôõïo ïofoo fooxïo ïoïo

Given (adjacent multibyte chars):
  foo æfïïooæ ïoòôõïo ïïofoo fïïooïo
Do:
  sïï;;ax
Expect:
  foo æfïïooæ ïoòôõïo ïïofoo fïxïooïo


###########################################################
# test sneak mapped to 'f' (instead of default 's')

Execute (map to f):
  unmap s
  unmap S
  nmap f <Plug>SneakForward
  nmap F <Plug>SneakBackward
  call sneak#init()

Given:
  abcdef abcdef abcdef

# issue #35
Do (sneak 'f', then Vim default 't', then sneak 'f'):
  fderxtcrxfderx;rx

Expect:
  abcxef axcxef abcxef


###########################################################
Execute (cleanup):
  unmap f
  unmap F
  nmap s <Plug>SneakForward
  nmap S <Plug>SneakBackward
  call sneak#init()
