#!/usr/bin/env bash

set -eo pipefail

###########
# backlight
#
# This script changes the backlight of a monitor for a Linux laptop, or external display via ddc.
#
# If you don't have permissions over the control file, add this to your sudoers file using "visudo", replacing "intel_backlight" with whatever symlink exists in /sys/class/backlight
#   ALL ALL = (ALL) NOPASSWD: /usr/bin/tee /sys/class/backlight/intel_backlight/brightness

# This determines whether to use the internal or external brightness control. Set to 0 to use an external monitor.
{{- if .laptop }}
LAPTOP=1
{{- else }}
LAPTOP=0
{{- end }}

if [ "$LAPTOP" -ne 0 ]; then
  # Look for a proper /sys control for us to use if this is a laptop
  SYS_DIR="$(find /sys/class/backlight -maxdepth 1 -type l | head -1)"
else
  # and a DDC bus to use if this isn't
  DDC_BUS=$(ddcutil detect -t | awk -F'-' '/bus/{print $NF}')
fi

setbacklight() {
  if [ "$LAPTOP" -ne 0 ]; then
    # Handle a laptop internal brightness control
    echo "$1" | sudo /usr/bin/tee "$SYS_DIR/brightness"
  else
    # Handle a monitor via ddcutil
    ddcutil --bus="$DDC_BUS" setvcp 10 "$1"
  fi
}

getbacklight() {
  if [ "$LAPTOP" -ne 0 ]; then
    cat "$SYS_DIR/brightness"
  else
    ddcutil --bus="$DDC_BUS" getvcp 10 | awk '{print $(NF-4)}' | tr -d ','
  fi
}

getmaxbacklight() {
  if [ "$LAPTOP" -ne 0 ]; then
    cat "$SYS_DIR/max_brightness"
  else
    ddcutil --bus="$DDC_BUS" getvcp 10 | awk '{print $NF}'
  fi
}

usage() {
  echo "$0 Usage:"
  echo "  backlight               Display the current brightness level"
  echo "  backlight max           Sets the monitor brightness to the highest value supported"
  echo "  backlight up            Increase monitor brightness by 10%"
  echo "  backlight down          Decrease monitor brightness by 10%"
  echo "  backlight N             Set monitor brightness to this integer value"
  echo "  backlight N%            Set monitor brightness to this percentage"
  echo "  backlight -h|--help     Display this message"
}

# Parse arguments
if [ $# -eq 0 ]; then
  # No args: show current brightness
  getbacklight
else
  MAX=$(getmaxbacklight)
  case "$1" in
    max)
      NEW="$MAX"
    ;;
    up|down)
      # Increase or decrease 10% at a time
      STEP=$((MAX / 10))
      CURRENT=$(getbacklight)
      if [ "$1" == "up" ]; then
        NEW=$((CURRENT + STEP))
      else
        NEW=$((CURRENT - STEP))
      fi
    ;;
    [0-9]*%)
      PERCENTAGE=$(tr -d '%' <<< "$1")
      NEW=$(bc <<< "scale=0; $MAX / 100*$PERCENTAGE")
    ;;
    [0-9]*)
      NEW="${1}"
    ;;
    -h|--help)
      usage
      exit 0
    ;;
    *)
      usage
      exit 1
    ;;
  esac
  if test "$NEW" -lt 0; then
    NEW=0
  fi
  if test "$NEW" -gt "$MAX"; then
    NEW=$MAX
  fi
  setbacklight "$NEW"
fi
